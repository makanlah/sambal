{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["https","require","App","_this","Object","_home_travis_build_makanlah_sambal_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_makanlah_sambal_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_makanlah_sambal_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","recipe","page","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onSubmit","getRecipe","bind","style","height","type","ref","width","value","e","request","_this2","refs","toSearch","length","httpsPost","result","existingState","JSON","parse","console","log","setState","preventDefault","alert","data","callback","post_options","requestOption","post_req","res","setEncoding","returnData","on","chunk","write","stringify","end","get_options","get_req","host","path","port","method","headers","Content-Type","Content-Length","Buffer","byteLength","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAGIA,SAAQC,EAAQ,KAEdC,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAQ,GACRC,KAAM,GAJIT,wEASZ,OAEEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYC,SAAUX,KAAKY,UAAUC,KAAKb,MAAOc,MAAO,CAACC,OAAQ,SAAjF,cACaR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,IAAI,WAAWH,MAAO,CAACI,MAAO,OAD9D,IACsEX,EAAAC,EAAAC,cAAA,WACpEF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASG,MAAM,YAE5BnB,KAAKI,MAAMC,0CAMRe,GAAG,IACPC,EADOC,EAAAtB,KAE6B,IAApCA,KAAKuB,KAAKC,SAASL,MAAMM,QAI7BJ,EAAU,iBAAsBrB,KAAKuB,KAAKC,SAASL,MAAQ,MAC3DnB,KAAK0B,UAAUL,EAAS,SAAAM,GACtB,IAAIC,EAAgBN,EAAKlB,MACzBwB,EAAcvB,OAASwB,KAAKC,MAAM,IAAMH,EAAS,KAAK,GACtDI,QAAQC,IAAIL,GACZL,EAAKW,SAASL,KAEhBR,EAAEc,kBAVAC,MAAM,4DAaAC,EAAMC,GACd,IAAIC,EAAetC,KAAKuC,cAAcH,EAAM,QAExCI,EAAW9C,EAAM2B,QAAQiB,EAAc,SAAAG,GACzCA,EAAIC,YAAY,QAChB,IAAIC,EAAa,GACjBF,EAAIG,GAAG,OAAQ,SAAAC,GACbF,GAAcE,IAEhBJ,EAAIG,GAAG,MAAO,WACZP,EAASM,OAGbH,EAASM,MAAMjB,KAAKkB,UAAUX,IAC9BI,EAASQ,uCAGFZ,EAAMC,GACb,IAAIY,EAAcjD,KAAKuC,cAAcH,EAAM,OAEvCc,EAAUxD,EAAM2B,QAAQ4B,EAAa,SAAAR,GACvCA,EAAIC,YAAY,QAChB,IAAIC,EAAa,GACjBF,EAAIG,GAAG,OAAQ,SAAAC,GACbF,GAAcE,IAEhBJ,EAAIG,GAAG,MAAO,WACZP,EAASM,OAGbO,EAAQJ,MAAMjB,KAAKkB,UAAUX,IAC7Bc,EAAQF,4CAGIZ,EAAMpB,GAClB,MAAO,CACLmC,KAAO,YACPC,KAAM,0BACNC,KAAM,IACNC,OAAQtC,EACRuC,QAAS,CACPC,eAAgB,mBAChBC,iBAAkBC,EAAOC,WAAW9B,KAAKkB,UAAUX,aAjFzCwB,aAuFHhE,gPChFKiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAA5D,EAAAC,cAACb,EAAA,EAAD,MAASyE,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ea15ede.chunk.js","sourcesContent":["/*jshint esversion: 6 */\nimport React, { Component } from 'react';\nimport './App.css';\nvar https = require('http');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipe: [],\n      page: 1,\n    };\n  }\n\n  render() {\n    return (\n      /* jshint ignore:start */\n      <div className=\"App\">\n        <form className=\"Main-form\" onSubmit={this.getRecipe.bind(this)} style={{height: '30px'}}>\n          Food name: <input type=\"text\" ref=\"toSearch\" style={{width: 100}}/> <br/>\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n        {this.state.recipe}\n      </div>\n      /* jshint ignore:end */\n    );\n  }\n\n  getRecipe(e) {\n    let request = {};\n    if (this.refs.toSearch.value.length === 0) {\n      alert('Input cannot be empty!');\n      return;\n    }\n    request = \"{ \\\"content\\\": \\\"\" + this.refs.toSearch.value + \"\\\" }\";\n    this.httpsPost(request, result => {\n      let existingState = this.state;\n      existingState.recipe = JSON.parse(\"[\" + result + \"]\")[0];\n      console.log(result);\n      this.setState(existingState);\n    });\n    e.preventDefault();\n  }\n\n  httpsPost(data, callback) {\n    var post_options = this.requestOption(data, 'POST');\n\n    var post_req = https.request(post_options, res => {\n      res.setEncoding('utf8');\n      var returnData = \"\";\n      res.on('data', chunk =>  {\n        returnData += chunk;\n      });\n      res.on('end', () => {\n        callback(returnData);\n      });\n    });\n    post_req.write(JSON.stringify(data));\n    post_req.end();\n  }\n\n  httpsGet(data, callback) {\n    var get_options = this.requestOption(data, 'GET');\n\n    var get_req = https.request(get_options, res => {\n      res.setEncoding('utf8');\n      var returnData = \"\";\n      res.on('data', chunk =>  {\n        returnData += chunk;\n      });\n      res.on('end', () => {\n        callback(returnData);\n      });\n    });\n    get_req.write(JSON.stringify(data));\n    get_req.end();\n  }\n\n  requestOption(data, type) {\n    return {\n      host:  '127.0.0.1', \n      path: '/todo/api/v1.0/recipes/',\n      port: 5000,\n      method: type,\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(JSON.stringify(data))\n      }\n    };\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}